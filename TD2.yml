openapi: 3.0.1
info:
  title: Cinema STD21021
  description: Cinema management
  version: 1.0.0
servers:
  - url: https://cinema.STD21018.com
tags:
  - name: Films
  - name: Projection
  - name: Room
  - name: Category
paths:
  /films:
    get:
      tags:
        - Films
      summary: Get the list of films
      description: List of the films
      responses:
        200:
          description: List of all films
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/film'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/badrequest'
    post: 
      tags:
        - Films
      summary: Add new Film
      description: Adding new film to the list
      requestBody:
        description: Informations about the new film
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFilm'   
      responses:
        200:
          description: New film added
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/film'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badrequest'
    put:
      tags:
        - Films
      summary: Change films informations 
      description: Change films informations
      requestBody:
        description: Films to be changed
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/film'
        required: true
      responses:
        200:
          description: films changed
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/film'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badrequest'
    delete:
      tags:
        - Films
      summary: delete films
      description: remove films from the list 
      responses:
        200:
          description: Films deleted successfully
          content:
            text/plain:
              example: Films deleted
        400:
          description: Bad request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/badrequest'
  /films/{id}:
    get:
      tags:
        - Films
      summary: Get informations about a film
      description: Get details about a film having the entered id
      parameters:
        - name: id
          in: path
          schema: 
            type: number
            example: 12
          required: true
      responses:
        200:
          description: Details about a film
          content:
            application/json:
              schema:   
                $ref: '#/components/schemas/film'
        400:
          description: Bad request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/badrequest'
    patch:
      tags:
        - Films
      summary: Change some details of a film
      description: |
            Possible change on 
            * title
            * summarize
            * type
            * director
            * release_date
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            example: 12
          required: true
      requestBody:
        description: film to be updated
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/createFilm'
            examples:
              changeTitle:
                summary: change the title
                description: How to change title and what it does
                value: 
                  title: "Trimobe"
              changeResume: 
                summary: change the description
                description: Once upon a time, ...
                value:
                  summarize: string
              changeType:
                summary: change the film's type
                description: How to change the type of a film
                value:
                  type: Fantasy
              changeDirector:
                summary: change the manager
                description: How to change the manager and what it does
                value:
                  director : "The Duffer brothers"
      responses:
        200:
          description: Informations updated 
          content:
            application/json:
              schema:  
                $ref: '#/components/schemas/film'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badrequest'
    delete:
      tags:
        - Films
      summary: Delete a film
      description: Remove a specific film from the list
      parameters:
        - name: id
          in: path
          schema:
            type: number
            example: 12
          required: true
      responses:
        200:
          description: Film deleted
          content:
            text/plain:
              example: Film deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:   
                $ref: '#/components/schemas/badrequest'
  /film/category:
    get:
      tags:
        - Films
      summary: Get films by category
      description: Get all the films having the entered category
      parameters:
        - name : Category
          in: query
          schema: 
            type: string
            example: Thriller
          required: true
      responses:
        200:
          description: List of films having the entered category
          content:
            application/json:
              schema:   
                type: array
                items: 
                  $ref: '#/components/schemas/film'
        400:
          description: Bad request
          content:
            application/json:
              schema:   
                $ref: '#/components/schemas/badrequest'
  /projections:
    get:
      tags:
        - Projection
      summary: Get the list of projection
      description: List of the projections
      responses:
        200:
          description: List of Projections
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/projection'
        400:
          description: Bad request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/badrequest'
    post:
      tags:
        - Projection 
      summary: Create a new projection list
      description: Create a new projection list
      requestBody:
        content:
          application/json:
            schema:   
              type: array
              items:
                $ref: '#/components/schemas/newProjection'
        required: true
      responses:
        200:
          description: List created
          content:
            application/json:
              schema:   
                $ref: '#/components/schemas/projection'
    put: 
      tags:
        - Projection
      summary: Change a projection list
      description: Change completely a projection list
      requestBody:
        content:
          application/json:
            schema:   
              $ref: '#/components/schemas/changeProjection'
        required: true
      responses:
        200:
          description: List changed 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/projection'
        400: 
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badrequest'
    patch: 
      tags:
        - Projection
      summary: Update projection list 
      description: |
        Possible updates on:
        * Film 
        * Room
      requestBody:
<<<<<<< HEAD
=======
        description: Projection to be updated
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projection'
              examples:
                changeFilm:
                  summary: Change Film
                  description: How to change projection's film
                  value:
                    Film: array
                changeRoom:
                  summary: Change Room
                  description: How to change projection's room
                  value:
                    Room: string
                changeHour:
                  summary: Change hour
                  description: How to change projection's hour
                  value:
                    hour: string
        required: true
      responses:
        200:
          description: The updated films
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projection'
        400:
          description: Bad request
 /category:
    get:
      tags:
        - Category
      operationId: get all category
      summary: Get category
      description: Get category
      responses:
        200: 
          description: List of Category
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Category'
        400:
          description: Bad request
    post: 
      tags:
        - Category
      operationId: create filmList per Category
      summary : create filmList per Category
      parameters:
        - name: category
          in: query
          schema:
            type: string
          required: true
      requestBody:
        description: Film to be created
>>>>>>> d7ed43c4e2248315c4b4225da573bcf4a907abaf
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/newProjection'
            examples:
              changeFilm:
                summary: Make changes on the film
                description: new film to screen
                value:
                  id: 2
                  FilmId: 12
              changeRoom:
                summary: Make changes on the room
                description: new projection room
                value:
                  id: 2
                  roomId: A
        required: true
      responses:
        200:
          description: projection updated
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/projection'
        400:
          description: Bad request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/badrequest'
  /projections/{id}:
    get:
      tags:
        - Projection
      summary: Get a specific projection
      description: Get the projection having the specified id 
      parameters:
        - name: id
          in: path
          schema: 
            type: number
            example: 2
          required: true
      responses:
        200:
          description: Details about the projection having the entered id
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/projection'
        400:
          description: Bad request
          content:
            application/json:
              schema:  
                $ref: '#/components/schemas/badrequest'
    put:
      tags:
        - Projection
      summary: Change completely a projection
      description: Change completely the projection having the entered id
      parameters:
        - name: id
          in: path
          schema: 
            type: number
            example: 2
          required: true
      responses:
        200:
          description: Projection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projection'
        400: 
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badrequest'
    patch:
      tags:
        - Projection
      summary: Update a projection
      description: Update informations of the projection having the entered id
      parameters:
        - name: id 
          in: path
          schema: 
            type: number
            example: 2
          required: true
      responses:
        200:
          description: Projection updated
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/projection'
        400:
          description: Bad request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/badrequest'
    delete:
      tags:
        - Projection
      summary: Delete a projection
      description: Delete the projection having the entered id 
      parameters:
        - name: id  
          in: path
          schema: 
            type: number
            example: 2
          required: true
      responses:
        200:  
          description: Projection successfully deleted
          content:
            text/plain:
              example: Projection successfully deleted
        400: 
          description: Bad request
          content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/badrequest'
  /projections/week/:
    get: 
      tags:
        - Projection
      summary: Get projection of a week
      description: Get projection of the week including the entered date
      parameters:
        - name: date
          in: query
          schema:   
            type: string
            format: date  
            example: 2022-08-01
          required: true
      responses:
        200:
          description: Projection of a week
          content:
            application/json:
              schema:   
                type: array
                items:
                $ref: '#/components/schemas/weekProjection'
        400:
          description: Bad request
          content:
            application/json:
              schema:   
                $ref: '#/components/schemas/badrequest'
  /rooms:
    get:
      tags:
        - Room
      summary: Get the list of the rooms
      description: List of the rooms
      responses:
        200:
          description: list of the rooms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/room'
        400:
          description: Bad request
          content:
            application/json:
               schema: 
                $ref: '#/components/schemas/badrequest'
  /room/{id}:
    get: 
      tags:
        - Room
      summary: Informations about a room
      description: Get informations about room having the specified id
      parameters:
        - name: id
          in: path
          schema:
            type: string
            enum:
              - A
              - B
            example: A
          required: true
      responses:
        200:
          description: informations about a room
          content:
            application/json:
              schema:   
                $ref: '#/components/schemas/room'
        400:
          description: Bad request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/badrequest'
  /categories:
    get:
      tags:
        - Category
      summary: List of film categories
      description: List of all film categories
      responses:
        200:
          description: List of all film categories
          content:
            application/json:
              schema:   
                type: array
                items:
                  $ref: '#/components/schemas/category'
        400:
          description: Bad request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/badrequest'
    post: 
      tags:
        - Category
      summary: Add new category to the list
      description: Add new film category to the list
      requestBody:
        content:
          application/json:
            schema: 
              $ref : '#/components/schemas/newCategory'
      responses:
        200:
          description: Category added to the list
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/category'
        400: 
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badrequest'

components:
  schemas:
<<<<<<< HEAD
    createFilm:
      description: Add new film
=======
    Category:
      type: object
      properties:
        id:
          type: number
          example: 2
        name:
          type: string
          example: "Romantique"
    Room:
      type: object
      properties:
        location:
          type: string
          example: "A"
        capacity:
          type: number
          example: 100
    CreateProjection:
      type: object
      properties:
        Film:
          type: array
          items:
            $ref: '#/components/schemas/Film'
        Room:
          type: string
          example: "A"
        Hour:
          type: array
          items:
            $ref: '#/components/schemas/Room'
    Projection:
      allOf:
        - $ref: '#/components/schemas/CreateProjection'
      type: object
      properties:
        id:
          type: integer
          example: 10
    CreateFilm:
>>>>>>> d7ed43c4e2248315c4b4225da573bcf4a907abaf
      type: object
      properties:
        title:
          type: string
          example: Mission Impossible
        duration:
          type: string
          example: 01:40:39
        summarize:
          type: string
          example: Lorem Ipsum ...
        categories:
          type: array
          items: 
            $ref: '#/components/schemas/category'
        release_date:
          type: string
          format: date
          example: 2002-08-10
        director:
          type: string
          example: Lorem Ipsum
    film: 
      description: informations about a film
      allOf:
        - $ref: '#/components/schemas/createFilm'
      type: object
      properties:
        id:
<<<<<<< HEAD
          type: number
          example: 1
    badrequest: 
      description: Bad request
      type: object
      properties:
        type:
          type: string
          example: BadRequestException
        message:
          type: string
          example: Bad request
    room: 
      description: informations about a room
      type: object
      properties:
        id:
          type: string
          enum:
            - A
            - B
          example: A
        capacity:
          type: number
          example: 100
    projection:
      type: object
      properties:
        id:
          type: number
          example: 2
        diffusion:
          type: string
          format: date-time
        Film:
          $ref: '#/components/schemas/film'
        Room:
          $ref: '#/components/schemas/room'
    newProjection:
      type: object
      properties:
        diffusion:
          type: string
          format: date-time
        FilmId: 
          type: number
          example: 12
        RoomId: 
          type: string
          enum:
            - A
            - B
          example: A
    changeProjection:
      allOf:
        - $ref: '#/components/schemas/newProjection'
      type: object
      properties:
        id:
          type: number
          example: 2
    newCategory:
      type: object
      properties:
        name:
          type: string
          example: Action
    category: 
      allOf:
        - $ref: '#/components/schemas/newCategory'
      type: object
      properties:
        id:
          type: number
          example: 5
    weekProjection:
      description: Show Projection each week
      type: object
      properties:
        weekOf: 
          type: string
          format: date
        Projections:  
          type: array
          items:
            $ref: '#/components/schemas/projection'
=======
          type: integer
          example: 10
>>>>>>> d7ed43c4e2248315c4b4225da573bcf4a907abaf
